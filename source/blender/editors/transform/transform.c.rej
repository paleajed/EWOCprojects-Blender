--- source/blender/editors/transform/transform.c	(revision 60799)
+++ source/blender/editors/transform/transform.c	(working copy)
@@ -855,8 +855,9 @@
 	char cmode = constraintModeToChar(t);
 	int handled = 1;
 	
+	ToolSettings *ts = CTX_data_tool_settings(t->context);
 	t->redraw |= handleMouseInput(t, &t->mouse, event);
-
+	
 	if (event->type == MOUSEMOVE) {
 		if (t->modifiers & MOD_CONSTRAINT_SELECT)
 			t->con.mode |= CON_SELECT;
@@ -1091,6 +1092,7 @@
 					t->prop_size *= fac;
 					if (t->spacetype == SPACE_VIEW3D && t->persp != RV3D_ORTHO)
 						t->prop_size = min_ff(t->prop_size, ((View3D *)t->view)->far);
+					ts->proportional_size = t->prop_size;
 					calculatePropRatio(t);
 				}
 				t->redraw |= TREDRAW_HARD;
@@ -1101,6 +1103,7 @@
 					t->prop_size *= 1.1f;
 					if (t->spacetype == SPACE_VIEW3D && t->persp != RV3D_ORTHO)
 						t->prop_size = min_ff(t->prop_size, ((View3D *)t->view)->far);
+					ts->proportional_size = t->prop_size;
 					calculatePropRatio(t);
 				}
 				t->redraw |= TREDRAW_HARD;
@@ -1108,6 +1111,7 @@
 			case TFM_MODAL_PROPSIZE_DOWN:
 				if (t->flag & T_PROP_EDIT) {
 					t->prop_size *= 0.90909090f;
+					ts->proportional_size = t->prop_size;
 					calculatePropRatio(t);
 				}
 				t->redraw |= TREDRAW_HARD;
@@ -1260,6 +1264,7 @@
 					t->prop_size *= 1.1f;
 					if (t->spacetype == SPACE_VIEW3D && t->persp != RV3D_ORTHO)
 						t->prop_size = min_ff(t->prop_size, ((View3D *)t->view)->far);
+					ts->proportional_size = t->prop_size;
 					calculatePropRatio(t);
 				}
 				t->redraw = 1;
@@ -1277,6 +1282,7 @@
 			case PADMINUS:
 				if (event->alt && t->flag & T_PROP_EDIT) {
 					t->prop_size *= 0.90909090f;
+					ts->proportional_size = t->prop_size;
 					calculatePropRatio(t);
 				}
 				t->redraw = 1;
@@ -1382,14 +1388,23 @@
 	createTransData(C, t);              // make TransData structs from selection
 
 	t->around = centerMode;             // override userdefined mode
-
+	
 	if (t->total == 0) {
 		success = FALSE;
 	}
 	else {
 		success = TRUE;
 
-		calculateCenter(t);
+		if (t->flag & (T_MANIP_SET | T_MANIP_FREE)) {
+			int savflag = t->flag;
+			t->flag &= ~T_MANIP_SET;
+			t->flag &= ~T_MANIP_FREE;
+			calculateCenter(t);
+			t->flag = savflag;
+		}
+		else {
+			calculateCenter(t);
+		}
 
 		if (cent2d) {
 			copy_v2_v2(cent2d, t->center2d);
@@ -1845,6 +1860,7 @@
 	int options = 0;
 	PropertyRNA *prop;
 
+	RegionView3D *rv3d = CTX_wm_region_view3d(C);
 	t->context = C;
 
 	/* added initialize, for external calls to set stuff in TransInfo, like undo string */
@@ -1875,11 +1891,10 @@
 	if (t->launch_event == 0) {
 		t->launch_event = LEFTMOUSE;
 	}
-
+	
 	if (!initTransInfo(C, t, op, event)) {  /* internal data, mouse, vectors */
 		return 0;
 	}
-
 	if (t->spacetype == SPACE_VIEW3D) {
 		//calc_manipulator_stats(curarea);
 		initTransformOrientation(C, t);
@@ -1888,6 +1903,8 @@
 		t->draw_handle_view = ED_region_draw_cb_activate(t->ar->type, drawTransformView, t, REGION_DRAW_POST_VIEW);
 		t->draw_handle_pixel = ED_region_draw_cb_activate(t->ar->type, drawTransformPixel, t, REGION_DRAW_POST_PIXEL);
 		t->draw_handle_cursor = WM_paint_cursor_activate(CTX_wm_manager(C), helpline_poll, drawHelpline, t);
+
+		copy_m4_m4(t->manip_rootmat, rv3d->twsetmat);
 	}
 	else if (t->spacetype == SPACE_IMAGE) {
 		unit_m3(t->spacemtx);
@@ -1898,7 +1915,6 @@
 	else if (t->spacetype == SPACE_CLIP) {
 		unit_m3(t->spacemtx);
 		t->draw_handle_view = ED_region_draw_cb_activate(t->ar->type, drawTransformView, t, REGION_DRAW_POST_VIEW);
-		t->draw_handle_cursor = WM_paint_cursor_activate(CTX_wm_manager(C), helpline_poll, drawHelpline, t);
 	}
 	else if (t->spacetype == SPACE_NODE) {
 		unit_m3(t->spacemtx);
@@ -2114,7 +2130,6 @@
 			if (constraint_axis[2]) {
 				t->con.mode |= CON_AXIS2;
 			}
-
 			setUserConstraint(t, t->current_orientation, t->con.mode, "%s");
 		}
 	}
@@ -3668,6 +3683,9 @@
 
 int Rotation(TransInfo *t, const int UNUSED(mval[2]))
 {
+	RegionView3D *rv3d;
+	float rotmat[4][4];
+	float mat4[4][4];
 	char str[MAX_INFO_LEN];
 	size_t ofs = 0;
 
@@ -3710,7 +3728,22 @@
 
 	t->values[0] = final;
 	
-	applyRotation(t, final, t->axis);
+	if (!(t->flag & T_MANIP_SET)) {
+		applyRotation(t, final, t->axis);
+	}
+	if (t->flag & (T_MANIP_SET | T_MANIP_FREE)) {
+		/* Rotate manipulator */
+		rv3d = CTX_wm_region_view3d(t->context);
+		copy_m4_m4(rv3d->twsetmat, t->manip_rootmat);
+		/* rotate */
+		axis_angle_to_mat4(rotmat, t->axis, t->values[0]);
+		mul_m4_m4m4(mat4, rotmat, rv3d->twsetmat);
+		/* copy location */
+		mat4[3][0] = rv3d->twsetmat[3][0];
+		mat4[3][1] = rv3d->twsetmat[3][1];
+		mat4[3][2] = rv3d->twsetmat[3][2];
+		copy_m4_m4(rv3d->twsetmat, mat4);
+	}
 	
 	recalcData(t);
 	
@@ -3771,11 +3804,13 @@
 
 int Trackball(TransInfo *t, const int UNUSED(mval[2]))
 {
+	RegionView3D *rv3d = CTX_wm_region_view3d(t->context);
 	char str[MAX_INFO_LEN];
 	size_t ofs = 0;
 	float axis1[3], axis2[3];
 	float mat[3][3], totmat[3][3], smat[3][3];
 	float phi[2];
+	float rotmat1[4][4], rotmat2[4][4], mat4[4][4];
 
 	copy_v3_v3(axis1, t->persinv[0]);
 	copy_v3_v3(axis2, t->persinv[1]);
@@ -3817,8 +3852,24 @@
 	// TRANSFORM_FIX_ME
 	//copy_m3_m3(t->mat, mat);	// used in manipulator
 
-	applyTrackball(t, axis1, axis2, phi);
-
+	if (!(t->flag & T_MANIP_SET)) {
+		applyTrackball(t, axis1, axis2, phi);
+	}
+	if (t->flag & (T_MANIP_SET | T_MANIP_FREE)) {
+		/* Trackball rotate manipulator */
+		rv3d = CTX_wm_region_view3d(t->context);
+		copy_m4_m4(rv3d->twsetmat, t->manip_rootmat);
+		/* rotate */
+		axis_angle_to_mat4(rotmat1, axis1, phi[0]);
+		axis_angle_to_mat4(rotmat2, axis2, phi[1]);
+		mul_m4_m4m4(mat4, rotmat1, rv3d->twsetmat);
+		mul_m4_m4m4(mat4, rotmat2, mat4);
+		/* copy location */
+		mat4[3][0] = rv3d->twsetmat[3][0];
+		mat4[3][1] = rv3d->twsetmat[3][1];
+		mat4[3][2] = rv3d->twsetmat[3][2];
+		copy_m4_m4(rv3d->twsetmat, mat4);
+	}
 	recalcData(t);
 
 	ED_area_headerprint(t->sa, str);
@@ -4028,8 +4079,10 @@
 /* uses t->vec to store actual translation in */
 int Translation(TransInfo *t, const int UNUSED(mval[2]))
 {
+	View3D *v3d = CTX_wm_view3d(t->context);
+	RegionView3D *rv3d = CTX_wm_region_view3d(t->context);
 	char str[MAX_INFO_LEN];
-
+	
 	if (t->con.mode & CON_APPLY) {
 		float pvec[3] = {0.0f, 0.0f, 0.0f};
 		float tvec[3];
@@ -4051,20 +4104,31 @@
 		headerTranslation(t, t->values, str);
 	}
 
-	applyTranslation(t, t->values);
-
-	/* evil hack - redo translation if clipping needed */
-	if (t->flag & T_CLIP_UV && clipUVTransform(t, t->values, 0)) {
+	if (!(t->flag & T_MANIP_SET)) {
 		applyTranslation(t, t->values);
 
-		/* In proportional edit it can happen that */
-		/* vertices in the radius of the brush end */
-		/* outside the clipping area               */
-		/* XXX HACK - dg */
-		if (t->flag & T_PROP_EDIT_ALL) {
-			clipUVData(t);
+		/* evil hack - redo translation if clipping needed */
+		if (t->flag & T_CLIP_UV && clipUVTransform(t, t->values, 0)) {
+			applyTranslation(t, t->values);
+	
+			/* In proportional edit it can happen that */
+			/* vertices in the radius of the brush end */
+			/* outside the clipping area               */
+			/* XXX HACK - dg */
+			if (t->flag & T_PROP_EDIT_ALL) {
+				clipUVData(t);
+			}
 		}
 	}
+	
+	if (t->flag & T_MANIP_SET) {
+		v3d->around = V3D_FREE;		/* switch to "Manipulator" pivot */
+	}
+	if (t->flag & (T_MANIP_SET | T_MANIP_FREE)) {
+		/* Translate manipulator */
+		copy_m4_m4(rv3d->twsetmat, t->manip_rootmat);
+		add_v3_v3(rv3d->twsetmat[3], t->values);
+	}
 
 	recalcData(t);
 
