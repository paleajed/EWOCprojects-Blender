--- source/blender/editors/transform/transform.h	(revision 60799)
+++ source/blender/editors/transform/transform.h	(working copy)
@@ -254,7 +254,8 @@
 	float  center[3];	 /* Individual data center                                                         */
 	float  mtx[3][3];    /* Transformation matrix from data space to global space                          */
 	float  smtx[3][3];   /* Transformation matrix from global space to data space                          */
-	float  axismtx[3][3];/* Axis orientation matrix of the data                                            */
+	float  axismtx[3][3];/* Axis orientation matrix of the data */
+	BMElem *elem;		 /* Store BMElem when applicable; for proportional preselection */
 	struct Object *ob;
 	struct bConstraint *con;	/* for objects/bones, the first constraint in its constraint stack */
 	TransDataExtension *ext;	/* for objects, poses. 1 single malloc per TransInfo! */
@@ -318,7 +319,8 @@
 
 	float		vec[3];			/* translation, to show for widget   	*/
 	float		mat[3][3];		/* rot/rescale, to show for widget   	*/
-
+	float		manip_rootmat[4][4];	/* basismatrix when setting manipulator */
+	
 	float		spacemtx[3][3];	/* orientation matrix of the current space	*/
 	char		spacename[64];	/* name of the current space, MAX_NAME		*/
 
@@ -397,7 +399,7 @@
 
 #define T_PROP_EDIT			(1 << 11)
 #define T_PROP_CONNECTED	(1 << 12)
-#define T_PROP_PROJECTED	(1 << 25)
+#define T_PROP_PROJECTED	(1 << 13)
 #define T_PROP_EDIT_ALL		(T_PROP_EDIT | T_PROP_CONNECTED | T_PROP_PROJECTED)
 
 #define T_V3D_ALIGN			(1 << 14)
@@ -424,6 +426,12 @@
 	/* alternative transformation. used to add offset to tracking markers */
 #define T_ALT_TRANSFORM		(1 << 24)
 
+	/* transforming manipulator only */
+#define T_MANIP_SET			(1 << 25)
+
+	/* using transformed manipulator */
+#define T_MANIP_FREE		(1 << 26)
+
 /* TransInfo->modifiers */
 #define	MOD_CONSTRAINT_SELECT	0x01
 #define	MOD_PRECISION			0x02
@@ -733,6 +741,7 @@
 
 struct TransformOrientation *addMatrixSpace(struct bContext *C, float mat[3][3], char name[], int overwrite);
 void applyTransformOrientation(const struct bContext *C, float mat[3][3], char *name);
+bool applyTransformLocation(const struct bContext *C, float loc[3]);
 
 #define ORIENTATION_NONE	0
 #define ORIENTATION_NORMAL	1
